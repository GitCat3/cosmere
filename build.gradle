buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

def build_number = System.env.BUILD_NUMBER ?: "Local"
version = "${forge_version}-b" + build_number

group = 'leaf.cosmere' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.jar_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

// Include resources generated by data generators.
sourceSets {
    main.resources.srcDirs += 'src/main/generated'
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')
            arg "-mixin.config=cosmere.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }

        data {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'cosmere', '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')

            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }

    }
}

mixin {
    add sourceSets.main, "cosmere.refmap.json"
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        //used for patchouli
        url "https://maven.blamejared.com/"
    }
    maven {
        //curio
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        //Mekanism Maven
        url 'https://modmaven.dev/'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    implementation fg.deobf("curse.maven:jade-324717:${jade_id}")


    //modname-modid:fileid?
    //runtimeOnly fg.deobf("curse.maven:appleskin-248787:3035787")
    //runtimeOnly fg.deobf("curse.maven:journeymap-32274:3397059")
    //runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_version}")
    //implementation fg.deobf("curse.maven:ctm-267602:2642375")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "cosmere",
                "Specification-Vendor"    : "cosmere",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "cosmere",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "cosmere.mixins.json"

        ])
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'

    filesMatching('data/cosmere/patchouli_books/guide/book.json') {
        filter {
            it.replaceAll("buildNumber", build_number)
        }
    }
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}